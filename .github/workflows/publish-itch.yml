name: Build and Publish to itch.io

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    name: Build Tauri app (${{ matrix.platform }})
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: 'macos-latest'
            platform: 'macos-aarch64' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
          - os: 'macos-latest' # for Intel based macs.
            platform: 'macos-x86_64'
            args: '--target x86_64-apple-darwin'
          - os: 'ubuntu-22.04'
            platform: 'linux'
            args: ''
          - os: 'windows-latest'
            platform: 'windows'
            args: ''
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies (Ubuntu only)
        if: matrix.os == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Setup pnpm
        uses: pnpm/action-setup@v3

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'pnpm' # Set this to npm, yarn or pnpm.

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable # Set this to dtolnay/rust-toolchain@nightly
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.os == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Setup Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install frontend dependencies
        # If you don't have `beforeBuildCommand` configured you may want to build your frontend here too.
        run: pnpm install # change this to npm or pnpm depending on which one you use.

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          NUXT_UI_PRO_LICENSE: ${{ secrets.NUXT_UI_PRO_LICENSE }}
        with:
          args: ${{ matrix.args }}

      - name: Upload Linux artifacts
        if: matrix.platform == 'linux'
        uses: actions/upload-artifact@v4
        with:
          name: linux-artifacts
          path: |
            src-tauri/target/release/bundle/deb/*.deb
            src-tauri/target/release/bundle/rpm/*.rpm
            src-tauri/target/release/bundle/appimage/*.AppImage

      - name: Upload Windows artifacts
        if: matrix.platform == 'windows'
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifacts
          path: src-tauri/target/release/bundle/msi/*.msi

      - name: Upload macOS x86_64 artifacts
        if: matrix.platform == 'macos-x86_64'
        uses: actions/upload-artifact@v4
        with:
          name: macos-x86_64-artifacts
          path: |
            src-tauri/target/x86_64-apple-darwin/release/bundle/dmg/*.dmg
            src-tauri/target/x86_64-apple-darwin/release/bundle/app/*.app.tar.gz

      - name: Upload macOS aarch64 artifacts
        if: matrix.platform == 'macos-aarch64'
        uses: actions/upload-artifact@v4
        with:
          name: macos-aarch64-artifacts
          path: |
            src-tauri/target/aarch64-apple-darwin/release/bundle/dmg/*.dmg
            src-tauri/target/aarch64-apple-darwin/release/bundle/app/*.app.tar.gz

  publish-to-itch:
    name: Publish Artifacts to itch.io
    needs: build
    runs-on: ubuntu-22.04
    steps:
      - name: Download Linux artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux-artifacts
          path: linux-artifacts

      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-artifacts
          path: windows-artifacts

      - name: Download macOS x86_64 artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-x86_64-artifacts
          path: macos-x86_64-artifacts

      - name: Download macOS aarch64 artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-aarch64-artifacts
          path: macos-aarch64-artifacts

      - name: Install butler
        run: |
          curl -L -o butler.zip https://broth.itch.ovh/butler/linux-amd64/LATEST/archive.zip
          unzip butler.zip
          chmod +x butler
          sudo mv butler /usr/local/bin/

      - name: Publish Linux builds
        run: |
          for file in linux-artifacts/*.deb; do
            [ -e "$file" ] && butler push "$file" "blaytheninth/selene:linux-deb" --userversion "$GITHUB_REF_NAME" || echo "No .deb files to upload."
          done
          for file in linux-artifacts/*.rpm; do
            [ -e "$file" ] && butler push "$file" "blaytheninth/selene:linux-rpm" --userversion "$GITHUB_REF_NAME" || echo "No .rpm files to upload."
          done
          for file in linux-artifacts/*.AppImage; do
            [ -e "$file" ] && butler push "$file" "blaytheninth/selene:linux-appimage" --userversion "$GITHUB_REF_NAME" || echo "No .AppImage files to upload."
          done
        env:
          BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}

      - name: Publish Windows build
        run: |
          for file in windows-artifacts/*.msi; do
            [ -e "$file" ] && butler push "$file" "blaytheninth/selene:windows" --userversion "$GITHUB_REF_NAME" || echo "No .msi files to upload."
          done
        env:
          BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}

      - name: Publish macOS builds
        run: |
          for file in macos-x86_64-artifacts/*_x64.dmg; do
            [ -e "$file" ] && butler push "$file" "blaytheninth/selene:macos-dmg-x64" --userversion "$GITHUB_REF_NAME" || echo "No *_x64.dmg files to upload."
          done
          for file in macos-aarch64-artifacts/*_aarch64.dmg; do
            [ -e "$file" ] && butler push "$file" "blaytheninth/selene:macos-dmg-aarch64" --userversion "$GITHUB_REF_NAME" || echo "No *_aarch64.dmg files to upload."
          done
          for file in macos-x86_64-artifacts/*_x64.app; do
            [ -e "$file" ] && butler push "$file" "blaytheninth/selene:macos-app-x64" --userversion "$GITHUB_REF_NAME" || echo "No *_x64.app files to upload."
          done
          for file in macos-aarch64-artifacts/*_aarch64.app; do
            [ -e "$file" ] && butler push "$file" "blaytheninth/selene:macos-app-aarch64" --userversion "$GITHUB_REF_NAME" || echo "No *_aarch64.app files to upload."
          done
        env:
          BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}